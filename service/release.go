// Code generated by gowsdl DO NOT EDIT.

package service

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetAuthorizedVersions struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetAuthorizedVersions"`

	CertificateCommonName string `xml:"certificateCommonName,omitempty" json:"certificateCommonName,omitempty"`

	CurrentVersion string `xml:"currentVersion,omitempty" json:"currentVersion,omitempty"`

	IncludeEarlierVersions bool `xml:"includeEarlierVersions,omitempty" json:"includeEarlierVersions,omitempty"`

	UserAgent string `xml:"userAgent,omitempty" json:"userAgent,omitempty"`
}

type GetAuthorizedVersionsResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetAuthorizedVersionsResponse"`

	GetAuthorizedVersionsResult *ArrayOfString `xml:"GetAuthorizedVersionsResult,omitempty" json:"GetAuthorizedVersionsResult,omitempty"`
}

type GetLanguagePackagesByVersion struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByVersion"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`
}

type GetLanguagePackagesByVersionResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByVersionResponse"`

	GetLanguagePackagesByVersionResult *ArrayOfLanguagePackage `xml:"GetLanguagePackagesByVersionResult,omitempty" json:"GetLanguagePackagesByVersionResult,omitempty"`
}

type GetLanguagePackagesByBaseVersion struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByBaseVersion"`

	BaseVersionNumber string `xml:"baseVersionNumber,omitempty" json:"baseVersionNumber,omitempty"`

	IncludeNewerVersions bool `xml:"includeNewerVersions,omitempty" json:"includeNewerVersions,omitempty"`
}

type GetLanguagePackagesByBaseVersionResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByBaseVersionResponse"`

	GetLanguagePackagesByBaseVersionResult *ArrayOfLanguagePackage `xml:"GetLanguagePackagesByBaseVersionResult,omitempty" json:"GetLanguagePackagesByBaseVersionResult,omitempty"`
}

type GetLanguagePackagesByVersionAndName struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByVersionAndName"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetLanguagePackagesByVersionAndNameResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetLanguagePackagesByVersionAndNameResponse"`

	GetLanguagePackagesByVersionAndNameResult *ArrayOfLanguagePackage `xml:"GetLanguagePackagesByVersionAndNameResult,omitempty" json:"GetLanguagePackagesByVersionAndNameResult,omitempty"`
}

type GetVersions struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetVersions"`

	CurrentVersion string `xml:"currentVersion,omitempty" json:"currentVersion,omitempty"`
}

type GetVersionsResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetVersionsResponse"`

	GetVersionsResult *ArrayOfString `xml:"GetVersionsResult,omitempty" json:"GetVersionsResult,omitempty"`
}

type GetAllVersions struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetAllVersions"`

	CurrentVersion string `xml:"currentVersion,omitempty" json:"currentVersion,omitempty"`

	IncludeEarlierVersions bool `xml:"includeEarlierVersions,omitempty" json:"includeEarlierVersions,omitempty"`
}

type GetAllVersionsResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetAllVersionsResponse"`

	GetAllVersionsResult *ArrayOfString `xml:"GetAllVersionsResult,omitempty" json:"GetAllVersionsResult,omitempty"`
}

type GetPackagesByVersion struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesByVersion"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`
}

type GetPackagesByVersionResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesByVersionResponse"`

	GetPackagesByVersionResult *ArrayOfPackage `xml:"GetPackagesByVersionResult,omitempty" json:"GetPackagesByVersionResult,omitempty"`
}

type GetPackagesVersionsByName struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesVersionsByName"`

	CertificateCommonName string `xml:"certificateCommonName,omitempty" json:"certificateCommonName,omitempty"`

	PackageName string `xml:"packageName,omitempty" json:"packageName,omitempty"`

	CurrentVersion string `xml:"currentVersion,omitempty" json:"currentVersion,omitempty"`

	Device string `xml:"device,omitempty" json:"device,omitempty"`

	IncludeEarlierVersions bool `xml:"includeEarlierVersions,omitempty" json:"includeEarlierVersions,omitempty"`

	Is210Compatible bool `xml:"is210Compatible,omitempty" json:"is210Compatible,omitempty"`
}

type GetPackagesVersionsByNameResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesVersionsByNameResponse"`

	GetPackagesVersionsByNameResult *ArrayOfVersion `xml:"GetPackagesVersionsByNameResult,omitempty" json:"GetPackagesVersionsByNameResult,omitempty"`
}

type GetPackagesVersionsByNameAndByVersions struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesVersionsByNameAndByVersions"`

	CertificateCommonName string `xml:"certificateCommonName,omitempty" json:"certificateCommonName,omitempty"`

	PackageName string `xml:"packageName,omitempty" json:"packageName,omitempty"`

	CurrentVersion string `xml:"currentVersion,omitempty" json:"currentVersion,omitempty"`

	Device string `xml:"device,omitempty" json:"device,omitempty"`

	PackageVersion string `xml:"packageVersion,omitempty" json:"packageVersion,omitempty"`

	IncludeEarlierVersions bool `xml:"includeEarlierVersions,omitempty" json:"includeEarlierVersions,omitempty"`
}

type GetPackagesVersionsByNameAndByVersionsResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetPackagesVersionsByNameAndByVersionsResponse"`

	GetPackagesVersionsByNameAndByVersionsResult *ArrayOfVersion `xml:"GetPackagesVersionsByNameAndByVersionsResult,omitempty" json:"GetPackagesVersionsByNameAndByVersionsResult,omitempty"`
}

type GetUpdateInfoByVersion struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetUpdateInfoByVersion"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`
}

type GetUpdateInfoByVersionResponse struct {
	XMLName xml.Name `xml:"http://services.control4.com/updates/v2_0/ GetUpdateInfoByVersionResponse"`

	GetUpdateInfoByVersionResult string `xml:"GetUpdateInfoByVersionResult,omitempty" json:"GetUpdateInfoByVersionResult,omitempty"`
}

type ArrayOfString struct {
	Astring []*string `xml:"string,omitempty" json:"string,omitempty"`
}

type ArrayOfLanguagePackage struct {
	LanguagePackage []*LanguagePackage `xml:"LanguagePackage,omitempty" json:"LanguagePackage,omitempty"`
}

type LanguagePackage struct {
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	LanguageLocale string `xml:"LanguageLocale,omitempty" json:"LanguageLocale,omitempty"`

	EnglishName string `xml:"EnglishName,omitempty" json:"EnglishName,omitempty"`

	FileName string `xml:"FileName,omitempty" json:"FileName,omitempty"`

	Loadable bool `xml:"Loadable,omitempty" json:"Loadable,omitempty"`

	Size int32 `xml:"Size,omitempty" json:"Size,omitempty"`

	PackageInfo string `xml:"PackageInfo,omitempty" json:"PackageInfo,omitempty"`

	ShutdownService string `xml:"ShutdownService,omitempty" json:"ShutdownService,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	Device string `xml:"Device,omitempty" json:"Device,omitempty"`

	Url string `xml:"Url,omitempty" json:"Url,omitempty"`

	Checksum string `xml:"Checksum,omitempty" json:"Checksum,omitempty"`

	Ordinal int32 `xml:"Ordinal,omitempty" json:"Ordinal,omitempty"`

	SR250SupportLevel int32 `xml:"SR250SupportLevel,omitempty" json:"SR250SupportLevel,omitempty"`

	SR250Encoding string `xml:"SR250Encoding,omitempty" json:"SR250Encoding,omitempty"`

	Platform string `xml:"Platform,omitempty" json:"Platform,omitempty"`
}

type ArrayOfPackage struct {
	Package []*Package `xml:"Package,omitempty" json:"Package,omitempty"`
}

type Package struct {
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	FileName string `xml:"FileName,omitempty" json:"FileName,omitempty"`

	Loadable bool `xml:"Loadable,omitempty" json:"Loadable,omitempty"`

	Size int32 `xml:"Size,omitempty" json:"Size,omitempty"`

	PackageInfo string `xml:"PackageInfo,omitempty" json:"PackageInfo,omitempty"`

	ShutdownService string `xml:"ShutdownService,omitempty" json:"ShutdownService,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	Device string `xml:"Device,omitempty" json:"Device,omitempty"`

	Url string `xml:"Url,omitempty" json:"Url,omitempty"`

	Checksum string `xml:"Checksum,omitempty" json:"Checksum,omitempty"`

	Ordinal int32 `xml:"Ordinal,omitempty" json:"Ordinal,omitempty"`

	Platform string `xml:"Platform,omitempty" json:"Platform,omitempty"`
}

type ArrayOfVersion struct {
	Version []*Version `xml:"Version,omitempty" json:"Version,omitempty"`
}

type Version struct {
	Package *Package `xml:"Package,omitempty" json:"Package,omitempty"`

	Version string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

type UpdatesSoap interface {
	GetAuthorizedVersions(request *GetAuthorizedVersions) (*GetAuthorizedVersionsResponse, error)

	GetAuthorizedVersionsContext(ctx context.Context, request *GetAuthorizedVersions) (*GetAuthorizedVersionsResponse, error)

	GetLanguagePackagesByVersion(request *GetLanguagePackagesByVersion) (*GetLanguagePackagesByVersionResponse, error)

	GetLanguagePackagesByVersionContext(ctx context.Context, request *GetLanguagePackagesByVersion) (*GetLanguagePackagesByVersionResponse, error)

	GetLanguagePackagesByBaseVersion(request *GetLanguagePackagesByBaseVersion) (*GetLanguagePackagesByBaseVersionResponse, error)

	GetLanguagePackagesByBaseVersionContext(ctx context.Context, request *GetLanguagePackagesByBaseVersion) (*GetLanguagePackagesByBaseVersionResponse, error)

	GetLanguagePackagesByVersionAndName(request *GetLanguagePackagesByVersionAndName) (*GetLanguagePackagesByVersionAndNameResponse, error)

	GetLanguagePackagesByVersionAndNameContext(ctx context.Context, request *GetLanguagePackagesByVersionAndName) (*GetLanguagePackagesByVersionAndNameResponse, error)

	GetVersions(request *GetVersions) (*GetVersionsResponse, error)

	GetVersionsContext(ctx context.Context, request *GetVersions) (*GetVersionsResponse, error)

	GetAllVersions(request *GetAllVersions) (*GetAllVersionsResponse, error)

	GetAllVersionsContext(ctx context.Context, request *GetAllVersions) (*GetAllVersionsResponse, error)

	GetPackagesByVersion(request *GetPackagesByVersion) (*GetPackagesByVersionResponse, error)

	GetPackagesByVersionContext(ctx context.Context, request *GetPackagesByVersion) (*GetPackagesByVersionResponse, error)

	/* Get all authorized versions and its package based on certificateCommonName, packageName, currentVersion and device. Filter with includeEarlierVersions. */
	GetPackagesVersionsByName(request *GetPackagesVersionsByName) (*GetPackagesVersionsByNameResponse, error)

	GetPackagesVersionsByNameContext(ctx context.Context, request *GetPackagesVersionsByName) (*GetPackagesVersionsByNameResponse, error)

	/* Get all authorized versions and its package based on certificateCommonName, packageName, currentVersion, device and packageVersion. Filter with includeEarlierVersions. */
	GetPackagesVersionsByNameAndByVersions(request *GetPackagesVersionsByNameAndByVersions) (*GetPackagesVersionsByNameAndByVersionsResponse, error)

	GetPackagesVersionsByNameAndByVersionsContext(ctx context.Context, request *GetPackagesVersionsByNameAndByVersions) (*GetPackagesVersionsByNameAndByVersionsResponse, error)

	GetUpdateInfoByVersion(request *GetUpdateInfoByVersion) (*GetUpdateInfoByVersionResponse, error)

	GetUpdateInfoByVersionContext(ctx context.Context, request *GetUpdateInfoByVersion) (*GetUpdateInfoByVersionResponse, error)
}

type updatesSoap struct {
	client *soap.Client
}

func NewUpdatesSoap(client *soap.Client) UpdatesSoap {
	return &updatesSoap{
		client: client,
	}
}

func (service *updatesSoap) GetAuthorizedVersionsContext(ctx context.Context, request *GetAuthorizedVersions) (*GetAuthorizedVersionsResponse, error) {
	response := new(GetAuthorizedVersionsResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetAuthorizedVersions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetAuthorizedVersions(request *GetAuthorizedVersions) (*GetAuthorizedVersionsResponse, error) {
	return service.GetAuthorizedVersionsContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetLanguagePackagesByVersionContext(ctx context.Context, request *GetLanguagePackagesByVersion) (*GetLanguagePackagesByVersionResponse, error) {
	response := new(GetLanguagePackagesByVersionResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetLanguagePackagesByVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetLanguagePackagesByVersion(request *GetLanguagePackagesByVersion) (*GetLanguagePackagesByVersionResponse, error) {
	return service.GetLanguagePackagesByVersionContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetLanguagePackagesByBaseVersionContext(ctx context.Context, request *GetLanguagePackagesByBaseVersion) (*GetLanguagePackagesByBaseVersionResponse, error) {
	response := new(GetLanguagePackagesByBaseVersionResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetLanguagePackagesByBaseVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetLanguagePackagesByBaseVersion(request *GetLanguagePackagesByBaseVersion) (*GetLanguagePackagesByBaseVersionResponse, error) {
	return service.GetLanguagePackagesByBaseVersionContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetLanguagePackagesByVersionAndNameContext(ctx context.Context, request *GetLanguagePackagesByVersionAndName) (*GetLanguagePackagesByVersionAndNameResponse, error) {
	response := new(GetLanguagePackagesByVersionAndNameResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetLanguagePackagesByVersionAndName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetLanguagePackagesByVersionAndName(request *GetLanguagePackagesByVersionAndName) (*GetLanguagePackagesByVersionAndNameResponse, error) {
	return service.GetLanguagePackagesByVersionAndNameContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetVersionsContext(ctx context.Context, request *GetVersions) (*GetVersionsResponse, error) {
	response := new(GetVersionsResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetVersions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetVersions(request *GetVersions) (*GetVersionsResponse, error) {
	return service.GetVersionsContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetAllVersionsContext(ctx context.Context, request *GetAllVersions) (*GetAllVersionsResponse, error) {
	response := new(GetAllVersionsResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetAllVersions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetAllVersions(request *GetAllVersions) (*GetAllVersionsResponse, error) {
	return service.GetAllVersionsContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetPackagesByVersionContext(ctx context.Context, request *GetPackagesByVersion) (*GetPackagesByVersionResponse, error) {
	response := new(GetPackagesByVersionResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetPackagesByVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetPackagesByVersion(request *GetPackagesByVersion) (*GetPackagesByVersionResponse, error) {
	return service.GetPackagesByVersionContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetPackagesVersionsByNameContext(ctx context.Context, request *GetPackagesVersionsByName) (*GetPackagesVersionsByNameResponse, error) {
	response := new(GetPackagesVersionsByNameResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetPackagesVersionsByName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetPackagesVersionsByName(request *GetPackagesVersionsByName) (*GetPackagesVersionsByNameResponse, error) {
	return service.GetPackagesVersionsByNameContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetPackagesVersionsByNameAndByVersionsContext(ctx context.Context, request *GetPackagesVersionsByNameAndByVersions) (*GetPackagesVersionsByNameAndByVersionsResponse, error) {
	response := new(GetPackagesVersionsByNameAndByVersionsResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetPackagesVersionsByNameAndByVersions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetPackagesVersionsByNameAndByVersions(request *GetPackagesVersionsByNameAndByVersions) (*GetPackagesVersionsByNameAndByVersionsResponse, error) {
	return service.GetPackagesVersionsByNameAndByVersionsContext(
		context.Background(),
		request,
	)
}

func (service *updatesSoap) GetUpdateInfoByVersionContext(ctx context.Context, request *GetUpdateInfoByVersion) (*GetUpdateInfoByVersionResponse, error) {
	response := new(GetUpdateInfoByVersionResponse)
	err := service.client.CallContext(ctx, "http://services.control4.com/updates/v2_0/GetUpdateInfoByVersion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *updatesSoap) GetUpdateInfoByVersion(request *GetUpdateInfoByVersion) (*GetUpdateInfoByVersionResponse, error) {
	return service.GetUpdateInfoByVersionContext(
		context.Background(),
		request,
	)
}
